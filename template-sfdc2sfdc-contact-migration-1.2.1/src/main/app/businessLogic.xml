<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:spring="http://www.springframework.org/schema/beans"
	  xmlns:smtp="http://www.mulesoft.org/schema/mule/smtp" 
	  xmlns:json="http://www.mulesoft.org/schema/mule/json"
	  xmlns:batch="http://www.mulesoft.org/schema/mule/batch" 
	  xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc" 
	  xmlns="http://www.mulesoft.org/schema/mule/core" 
	  xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	   
	  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	  xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/smtp http://www.mulesoft.org/schema/mule/smtp/current/mule-smtp.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd">
    <batch:job name="migrateContactsBatch">
        <batch:threading-profile poolExhaustedAction="WAIT"/>
        <batch:input>
			<sfdc:query config-ref="SalesforceA" query="SELECT Description,Email,FirstName,LastName,LastModifiedDate,MailingCountry,Title, Account.Id, Account.Name, Account.AccountNumber, Account.Description, Account.Industry, Account.NumberOfEmployees
FROM Contact WHERE (MailingCountry = 'US' AND Email &lt;&gt; '') ORDER BY Email ASC" doc:name="Query Contacts from Salesforce instance A" fetchSize="${page.size}"/>
        </batch:input> 
        <batch:process-records>
            <batch:step name="getContactInBStep">
                <enricher   doc:name="store result in 'payload.Id' and payload.LastModifiedDateB">
                    <sfdc:query-single config-ref="SalesforceB" query="SELECT Id, LastModifiedDate FROM Contact WHERE Email = '#[payload['Email']]'" doc:name="Query contact in Salesforce instance B"/>
                    <enrich source="#[payload == null ? null : payload.Id]" target="#[payload.Id]"/>
                    <enrich source="#[payload == null ? null : payload.LastModifiedDate]" target="#[payload.LastModifiedDateB]"/>
                </enricher>
            </batch:step>
            <batch:step name="findOrCreateAccountInBStep" accept-expression="'syncAccount' == '${account.sync.policy}' &amp;&amp; (payload['LastModifiedDateB'] == null || (new org.joda.time.DateTime(payload.LastModifiedDate)).isAfter(new org.joda.time.DateTime(payload.LastModifiedDateB)))">
                <choice doc:name="Choice">
                    <when expression="#[payload['Account'] != null]">
                        <flow-ref name="findOrCreateAccountFlow" doc:name="Trigger findOrCreateAccountFlow"/>
                    </when>
                    <otherwise>
                        <logger message="There is no Account assigned to this contact. Doing nothing" level="INFO" doc:name="Logger"/>
                    </otherwise>
                </choice>

            </batch:step>

            <batch:step name="createContactsInBStep" accept-expression="payload != null &amp;&amp;  (payload['LastModifiedDateB'] == null || (new org.joda.time.DateTime(payload.LastModifiedDate)).isAfter(new org.joda.time.DateTime(payload.LastModifiedDateB)))">

            	
                <batch:commit size="200" doc:name="Batch Commit">
                    <dw:transform-message doc:name="Prepare payload for upsert">
                        <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map
{
	Id: $.Id,
	Email: $.Email,
	Description: $.Description,
	FirstName: $.FirstName,
	LastName: $.LastName,
	MailingCountry: $.MailingCountry,
	Title: $.Title,
	(AccountId: $.AccountId) when ($.AccountId != null) 
}]]></dw:set-payload>
                    </dw:transform-message>
					<sfdc:upsert config-ref="SalesforceB"  type="Contact" doc:name="Upsert contacts in org B" externalIdFieldName="Id">
                        <sfdc:objects ref="#[payload]"/>
					</sfdc:upsert>

                </batch:commit>
            </batch:step>
        </batch:process-records>
        <batch:on-complete>
            <flow-ref name="sendEmailLogResultFlow" doc:name="Trigger sendEmailLogResultFlow"/>

        </batch:on-complete>
    </batch:job>
    <sub-flow name="findOrCreateAccountFlow" >
        <enricher source="#[payload == null ? null : payload.Id]" target="#[payload.AccountId]" doc:name="store result in 'payload.AccountId'">
            <sfdc:query-single config-ref="SalesforceB" query="SELECT Id FROM Account WHERE Name = '#[payload['Account']['Name']]'" doc:name="Query Account in  Salesforce Instance B"/>
        </enricher>
        <choice doc:name="Choice">
            <when expression="#[payload['AccountId'] == null]">
                <flow-ref name="createAccountFlow" doc:name="Trigger CreateAccountFlow"/>
            </when>
            <otherwise>
                <logger message="Account already exists. Nothing to create." level="INFO" doc:name="Logger"/>

            </otherwise>
        </choice>

    </sub-flow>
    <sub-flow name="createAccountFlow" >
        <enricher target="#[payload['AccountId']]" doc:name="store result in 'payload.AccountId'" source="#[payload.getId()]">
            <processor-chain doc:name="Processor Chain">
                <dw:transform-message doc:name="Transform payload to Account Map">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	AccountNumber: payload.Account.AccountNumber,
	Description : payload.Account.Description,
	Name: payload.Account.Name,
	(NumberOfEmployees : payload.Account.NumberOfEmployees as :number {class: "java.lang.Integer"}) when (payload.Account.NumberOfEmployees != null),
	Industry: payload.Account.Industry
}]]></dw:set-payload>
                </dw:transform-message>

                <sfdc:create-single config-ref="SalesforceB" type="Account" doc:name="create Account in Salesforce Instance B">

                </sfdc:create-single>

            </processor-chain>
        </enricher>
    </sub-flow>
    <sub-flow name="sendEmailLogResultFlow" >
        <scatter-gather doc:name="All">
            <processor-chain>
                <json:object-to-json-transformer doc:name="Transform BatchJobInstance to JSON"/>
                <logger message="Migration process has finished: #[payload]" level="INFO" doc:name="Log 'Migration process has finished'"/>
            </processor-chain>
            <processor-chain>
                <json:object-to-json-transformer doc:name="Transform BatchJobInstance to JSON"/>
                <smtp:outbound-endpoint host="${smtp.host}" port="${smtp.port}" user="${smtp.user}" password="${smtp.password}" connector-ref="gmailConnector" to="${mail.to}" from="${mail.from}" subject="${mail.subject}" responseTimeout="10000" doc:name="Send mail"/>
            </processor-chain>
        </scatter-gather>
    </sub-flow>
    <flow name="mainFlow"  processingStrategy="synchronous" doc:description="This flow is the entry point to the Anypoint Template  business logic.

This flow should control the direction of the application, and it should be called by the different endpoints that your Anypoint Template  exposes to trigger it.

">
        <batch:execute name="migrateContactsBatch" doc:name="Trigger migrateContactsBatch"/>
        <exception-strategy ref="defaultChoiceExceptionStrategy" doc:name="Catch Exception and call defaultChoiceExceptionStrategy"/>
    </flow>
    
    
</mule>
