package sima.utils;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Properties;
import java.util.Vector;

import org.mule.api.MuleMessage;
import org.mule.api.transformer.TransformerException;
import org.mule.transformer.AbstractMessageTransformer;

import com.jcraft.jsch.Channel;
import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.Session;
import com.jcraft.jsch.SftpException;

/**
 * @author kodehelp
 *
 */
public class SFTPinJava extends AbstractMessageTransformer {

	 Properties prop = new Properties(); //Creating property file object read File attachment path from property file
     InputStream input = null; // To read property file path
     static ChannelSftp channelSftp = null;
     static Session session = null;
     static Channel channel = null;
     static String PATHSEPARATOR = "/";
     ArrayList listFiles = new ArrayList(); 

	@Override
	public Object transformMessage(MuleMessage message, String outputEncoding) throws TransformerException {
		// TODO Auto-generated method stub
		
        String SFTPHOST = "10.20.30.40";
        int SFTPPORT = 22;
        String SFTPUSER = "username";
        String SFTPPASS = "password";
        String SFTPWORKINGDIR = "/export/home/kodehelp/";
        String SFTPLOCALDIR = "";
		
		
        try {
            input = getClass().getClassLoader().getResourceAsStream("mule-app.properties"); // Property file path in classpath
             prop.load(input); // get and load the property file
             //String type = prop.getProperty("mule.env");
             
             //input = getClass().getClassLoader().getResourceAsStream("mule."+ type + ".properties"); // here you get the file 

             
             SFTPHOST=prop.getProperty("sftp.host");
             SFTPUSER=prop.getProperty("sftp.user");
             SFTPPASS=prop.getProperty("sftp.password"); 
             SFTPWORKINGDIR= prop.getProperty("sftp.path");
             SFTPLOCALDIR= prop.getProperty("sftp.locpath");
             
        } catch (IOException e)
        {

            e.printStackTrace();
        }
		
		


        //Session session = null;
        //Channel channel = null;
        //ChannelSftp channelSftp = null;

        try {
            JSch jsch = new JSch();
            session = jsch.getSession(SFTPUSER, SFTPHOST, SFTPPORT);
            session.setPassword(SFTPPASS);
            java.util.Properties config = new java.util.Properties();
            config.put("StrictHostKeyChecking", "no");
            session.setConfig(config);
            session.connect();
            channel = session.openChannel("sftp");
            channel.connect();
            channelSftp = (ChannelSftp) channel;
            channelSftp.cd(SFTPWORKINGDIR);
            
           
            listFiles = recursiveFolderDownload(SFTPWORKINGDIR, SFTPLOCALDIR); // Recursive folder content download from SFTP server

      
            
            
        } catch (Exception ex) {
            ex.printStackTrace();
        }

		return listFiles;
	}
	
	 @SuppressWarnings("unchecked")
	    private static ArrayList<String> recursiveFolderDownload(String sourcePath, String destinationPath) throws SftpException {
	        Vector<ChannelSftp.LsEntry> fileAndFolderList = channelSftp.ls(sourcePath); // Let list of folder content
	        ArrayList FilesNames = new ArrayList();
	        //Iterate through list of folder content
	        for (ChannelSftp.LsEntry item : fileAndFolderList) {
	            
	            if (!item.getAttrs().isDir()) { // Check if it is a file (not a directory).
	                if (!(new File(destinationPath + PATHSEPARATOR + item.getFilename())).exists()
	                        || (item.getAttrs().getMTime() > Long
	                                .valueOf(new File(destinationPath + PATHSEPARATOR + item.getFilename()).lastModified()
	                                        / (long) 1000)
	                                .intValue())) { // Download only if changed later.

	                    new File(destinationPath + PATHSEPARATOR + item.getFilename());
	                    
	                    channelSftp.get(sourcePath + PATHSEPARATOR + item.getFilename(),
	                            destinationPath + PATHSEPARATOR + item.getFilename()); 
	                    // Download file from source (source filename, destination filename).
	                    FilesNames.add(item.getFilename());
	                    
	                }
	            } else if (!(".".equals(item.getFilename()) || "..".equals(item.getFilename()))) {
	                new File(destinationPath + PATHSEPARATOR + item.getFilename()).mkdirs(); // Empty folder copy.
	                recursiveFolderDownload(sourcePath + PATHSEPARATOR + item.getFilename(),
	                        destinationPath + PATHSEPARATOR + item.getFilename()); // Enter found folder on server to read its contents and create locally.
	            }
	        }
	        
	        return FilesNames;
	    }

}
